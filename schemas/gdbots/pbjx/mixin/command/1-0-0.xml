<?xml version="1.0" encoding="UTF-8" ?>
<pbj-schema xmlns="http://gdbots.io/pbj/xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://gdbots.io/pbj/xsd http://gdbots.io/pbj/xsd/schema.xsd">

  <schema id="pbj:gdbots:pbjx:mixin:command:1-0-0" mixin="true">
    <fields>
      <field name="command_id" type="time-uuid" required="true"/>
      <field name="occurred_at" type="microtime"/>
      <field name="expected_etag" type="string" pattern="^[\w\.:-]+$" max="100">
        <description>
          Used to perform optimistic concurrency control.
          @link https://en.wikipedia.org/wiki/HTTP_ETag
        </description>
      </field>
      <field name="ctx_retries" type="tiny-int">
        <description>
          The "ctx_retries" field is used to keep track of how many attempts were
          made to process this command. In some cases, the service or transport
          that handles the command may be down or an optimistic check has failed
          and is being retried.
        </description>
      </field>
      <field name="ctx_causator_ref" type="message-ref"/>
      <field name="ctx_correlator_ref" type="message-ref"/>
      <field name="ctx_user_ref" type="message-ref"/>
      <field name="ctx_app" type="message">
        <description>
          The "ctx_app" refers to the application used to send the command. This is
          different from ctx_ua (user_agent) because the agent used (Safari, Firefox)
          is not necessarily the app used (cms, iOS app, website)
        </description>
        <any-of>
          <curie>gdbots:contexts::app</curie>
        </any-of>
      </field>
      <field name="ctx_cloud" type="message">
        <description>
          The "ctx_cloud" is set by the server receiving the command and is generally
          only used internally for tracking and performance monitoring.
        </description>
        <any-of>
          <curie>gdbots:contexts::cloud</curie>
        </any-of>
      </field>
      <field name="ctx_ip" type="string" format="ipv4" overridable="true"/>
      <field name="ctx_ua" type="text" overridable="true"/>
    </fields>

    <php-options>
      <insertion-points>
        <imports>
          <![CDATA[
use Gdbots\Pbj\WellKnown\MessageRef;
            ]]>
        </imports>
        <methods>
          <![CDATA[
public function generateMessageRef(?string $tag = null): MessageRef
{
    return new MessageRef(self::schema()->getCurie(), $this->fget(self::COMMAND_ID_FIELD), $tag);
}

public function getUriTemplateVars(): array
{
    return [
        'command_id' => $this->fget(self::COMMAND_ID_FIELD),
        'occurred_at' => $this->fget(self::OCCURRED_AT_FIELD),
        'ctx_user_ref' => $this->fget(self::CTX_USER_REF_FIELD),
    ];
}
            ]]>
        </methods>
      </insertion-points>
    </php-options>

    <js-options>
      <insertion-points>
        <imports>
          <![CDATA[
import MessageRef from '@gdbots/pbj/well-known/MessageRef';
            ]]>
        </imports>
        <methods>
          <![CDATA[
/**
 * @param {?string} tag
 * @returns {MessageRef}
 */
generateMessageRef(tag = null) {
  return new MessageRef(this.schema().getCurie(), this.get(this.COMMAND_ID_FIELD), tag);
},

/**
 * @returns {Object}
 */
getUriTemplateVars() {
  return {
    command_id: `${this.get(this.COMMAND_ID_FIELD)}`,
    occurred_at: `${this.get(this.OCCURRED_AT_FIELD)}`,
    ctx_user_ref: `${this.get(this.CTX_USER_REF_FIELD, '')}`,
  };
}
            ]]>
        </methods>
      </insertion-points>
    </js-options>
  </schema>
</pbj-schema>
