// @link http://schemas.gdbots.io/json-schema/gdbots/ncr/mixin/node/1-0-0.json#
import Fb from '@gdbots/pbj/FieldBuilder';
import NodeStatus from '@gdbots/schemas/gdbots/ncr/enums/NodeStatus';
import SchemaId from '@gdbots/pbj/SchemaId';
import T from '@gdbots/pbj/types';
import UuidIdentifier from '@gdbots/pbj/well-known/UuidIdentifier';

export default class NodeV1Mixin {
  /**
   * @returns {SchemaId}
   */
  static getId() {
    return SchemaId.fromString(this.SCHEMA_ID);
  }

  /**
   * @param {string} name
   * @returns {boolean}
   */
  static hasField(name) {
    return this.FIELDS.includes(name);
  }

  /**
   * @returns {Field[]}
   */
  static getFields() {
    return [
      /*
       * The "_id" value:
       * - MUST NOT change for the life of the node.
       * - SHOULD be globally unique
       * - SHOULD be generated by the app (ideally in default value closure... e.g. UuidIdentifier::generate())
       */
      Fb.create(this._ID_FIELD, T.IdentifierType.create())
        .required()
        .withDefault(UuidIdentifier.generate)
        .classProto(UuidIdentifier)
        .overridable(true)
        .build(),
      Fb.create(this.STATUS_FIELD, T.StringEnumType.create())
        .withDefault(NodeStatus.DRAFT)
        .classProto(NodeStatus)
        .build(),
      Fb.create(this.ETAG_FIELD, T.StringType.create())
        .maxLength(100)
        .pattern('^[\\w\\.:-]+$')
        .build(),
      Fb.create(this.CREATED_AT_FIELD, T.MicrotimeType.create())
        .build(),
      /*
       * A fully qualified reference to what created this node. This is intentionally a message-ref
       * and not a user id because it is often a program that creates nodes, not a user.
       */
      Fb.create(this.CREATOR_REF_FIELD, T.MessageRefType.create())
        .build(),
      Fb.create(this.UPDATED_AT_FIELD, T.MicrotimeType.create())
        .useTypeDefault(false)
        .build(),
      /*
       * A fully qualified reference to what updated this node. This is intentionally a message-ref
       * and not a user id because it is often a program that updates nodes, not a user.
       * E.g. "acme:iam:node:app:cli-scheduler" or "acme:iam:node:user:60c71df0-fda8-11e5-bfb9-30342d363854"
       */
      Fb.create(this.UPDATER_REF_FIELD, T.MessageRefType.create())
        .build(),
      /*
       * A reference to the last event that changed the state of this node.
       * E.g. "acme:blog:event:article-published:60c71df0-fda8-11e5-bfb9-30342d363854"
       */
      Fb.create(this.LAST_EVENT_REF_FIELD, T.MessageRefType.create())
        .build(),
      Fb.create(this.TITLE_FIELD, T.StringType.create())
        .build(),
    ];
  }
}

const M = NodeV1Mixin;
M.SCHEMA_ID = 'pbj:gdbots:ncr:mixin:node:1-0-0';
M.SCHEMA_CURIE = 'gdbots:ncr:mixin:node';
M.SCHEMA_CURIE_MAJOR = 'gdbots:ncr:mixin:node:v1';

M._ID_FIELD = '_id';
M.STATUS_FIELD = 'status';
M.ETAG_FIELD = 'etag';
M.CREATED_AT_FIELD = 'created_at';
M.CREATOR_REF_FIELD = 'creator_ref';
M.UPDATED_AT_FIELD = 'updated_at';
M.UPDATER_REF_FIELD = 'updater_ref';
M.LAST_EVENT_REF_FIELD = 'last_event_ref';
M.TITLE_FIELD = 'title';

M.FIELDS = [
  M._ID_FIELD,
  M.STATUS_FIELD,
  M.ETAG_FIELD,
  M.CREATED_AT_FIELD,
  M.CREATOR_REF_FIELD,
  M.UPDATED_AT_FIELD,
  M.UPDATER_REF_FIELD,
  M.LAST_EVENT_REF_FIELD,
  M.TITLE_FIELD,
];
