<?php
declare(strict_types=1);

// @link http://schemas.gdbots.io/json-schema/gdbots/ncr/mixin/node/1-0-0.json#
namespace Gdbots\Schemas\Ncr\Mixin\Node;

use Gdbots\Pbj\Field;
use Gdbots\Pbj\FieldBuilder as Fb;
use Gdbots\Pbj\SchemaId;
use Gdbots\Pbj\Type as T;
use Gdbots\Pbj\WellKnown\UuidIdentifier;
use Gdbots\Schemas\Ncr\Enum\NodeStatus;

final class NodeV1Mixin
{
    const SCHEMA_ID = 'pbj:gdbots:ncr:mixin:node:1-0-0';
    const SCHEMA_CURIE = 'gdbots:ncr:mixin:node';
    const SCHEMA_CURIE_MAJOR = 'gdbots:ncr:mixin:node:v1';

    const _ID_FIELD = '_id';
    const STATUS_FIELD = 'status';
    const ETAG_FIELD = 'etag';
    const CREATED_AT_FIELD = 'created_at';
    const CREATOR_REF_FIELD = 'creator_ref';
    const UPDATED_AT_FIELD = 'updated_at';
    const UPDATER_REF_FIELD = 'updater_ref';
    const LAST_EVENT_REF_FIELD = 'last_event_ref';
    const TITLE_FIELD = 'title';

    const FIELDS = [
      self::_ID_FIELD,
      self::STATUS_FIELD,
      self::ETAG_FIELD,
      self::CREATED_AT_FIELD,
      self::CREATOR_REF_FIELD,
      self::UPDATED_AT_FIELD,
      self::UPDATER_REF_FIELD,
      self::LAST_EVENT_REF_FIELD,
      self::TITLE_FIELD,
    ];

    final private function __construct() {}

    public static function getId(): SchemaId
    {
        return SchemaId::fromString(self::SCHEMA_ID);
    }

    public static function hasField(string $name): bool
    {
        return in_array($name, self::FIELDS, true);
    }

    /**
     * @return Field[]
     */
    public static function getFields(): array
    {
        return [
            /*
             * The "_id" value:
             * - MUST NOT change for the life of the node.
             * - SHOULD be globally unique
             * - SHOULD be generated by the app (ideally in default value closure... e.g. UuidIdentifier::generate())
             */
            Fb::create(self::_ID_FIELD, T\IdentifierType::create())
                ->required()
                ->withDefault(function() { return UuidIdentifier::generate(); })
                ->className(UuidIdentifier::class)
                ->overridable(true)
                ->build(),
            Fb::create(self::STATUS_FIELD, T\StringEnumType::create())
                ->withDefault(NodeStatus::DRAFT())
                ->className(NodeStatus::class)
                ->build(),
            Fb::create(self::ETAG_FIELD, T\StringType::create())
                ->maxLength(100)
                ->pattern('^[\w\.:-]+$')
                ->build(),
            Fb::create(self::CREATED_AT_FIELD, T\MicrotimeType::create())
                ->build(),
            /*
             * A fully qualified reference to what created this node. This is intentionally a message-ref
             * and not a user id because it is often a program that creates nodes, not a user.
             */
            Fb::create(self::CREATOR_REF_FIELD, T\MessageRefType::create())
                ->build(),
            Fb::create(self::UPDATED_AT_FIELD, T\MicrotimeType::create())
                ->useTypeDefault(false)
                ->build(),
            /*
             * A fully qualified reference to what updated this node. This is intentionally a message-ref
             * and not a user id because it is often a program that updates nodes, not a user.
             * E.g. "acme:iam:node:app:cli-scheduler" or "acme:iam:node:user:60c71df0-fda8-11e5-bfb9-30342d363854"
             */
            Fb::create(self::UPDATER_REF_FIELD, T\MessageRefType::create())
                ->build(),
            /*
             * A reference to the last event that changed the state of this node.
             * E.g. "acme:blog:event:article-published:60c71df0-fda8-11e5-bfb9-30342d363854"
             */
            Fb::create(self::LAST_EVENT_REF_FIELD, T\MessageRefType::create())
                ->build(),
            Fb::create(self::TITLE_FIELD, T\StringType::create())
                ->build(),
        ];
    }
}
